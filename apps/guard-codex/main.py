import os
import pathlib
import subprocess
import time

from embeddings import embed, search_similar
from fastapi import FastAPI, Query
from pydantic import BaseModel

app = FastAPI(title="GitGuard Codex", version="0.1.0")
DOCS_SRC = pathlib.Path(os.getenv("DOCS_SRC", "docs_src"))


class PREvent(BaseModel):
    number: int
    title: str | None = None
    labels: list[str] = []
    risk_score: float = 0.0
    checks_passed: bool = False
    changed_paths: list[str] = []
    coverage_delta: float = 0.0
    perf_delta: float = 0.0
    policies: list[str] = []
    release_window_state: str = "open"
    summary: str = ""


@app.post("/codex/pr-digest")
def pr_digest(ev: PREvent):
    prs_dir = DOCS_SRC / "prs"
    prs_dir.mkdir(parents=True, exist_ok=True)
    md = prs_dir / f"{ev.number}.md"

    # Generate Mermaid graph for PR relationships
    mermaid_lines = [
        "```mermaid",
        "graph LR",
        f'  PR["PR #{ev.number}"] -->|touches| FILES["Files ({len(ev.changed_paths)})"]',
    ]

    # Add file nodes (limit to first 5 for readability)
    for i, path in enumerate(ev.changed_paths[:5]):
        file_id = f"F{i+1}"
        short_path = path.split("/")[-1] if "/" in path else path
        mermaid_lines.append(f'  FILES --> {file_id}["{short_path}"]')

    if len(ev.changed_paths) > 5:
        mermaid_lines.append(f'  FILES --> MORE["...{len(ev.changed_paths)-5} more"]')

    # Add governance relationships
    for policy in ev.policies:
        policy_id = policy.replace(".", "_").replace("-", "_")
        mermaid_lines.append(f'  PR -->|governed_by| {policy_id}["{policy}"]')

    mermaid_lines.append("```")

    lines = (
        [
            f"# PR #{ev.number}: {ev.title or ''}",
            "",
            f"**Risk:** {ev.risk_score} • **Checks:** {'✓' if ev.checks_passed else '✗'}  ",
            f"**Coverage Δ:** {ev.coverage_delta}% • **Perf Δ:** {ev.perf_delta}",
            f"**Labels:** {', '.join(ev.labels) or 'none'}",
            "",
            "## Impact Graph",
            "",
        ]
        + mermaid_lines
        + [
            "",
            "## Summary",
            (ev.summary or "_generated by GitGuard_"),
            "",
            "## Changed Files",
            (os.linesep.join(f"- `{p}`" for p in ev.changed_paths) or "_n/a_"),
            "",
            "## Governance",
            f"- Release window: {ev.release_window_state}",
            f"- Policies: {', '.join(ev.policies) or 'none'}",
            "",
        ]
    )
    md.write_text("\n".join(lines), encoding="utf-8")

    try:
        subprocess.run(["make", "docs-build"], check=True)
        return {"status": "ok", "page": f"/prs/{ev.number}.md", "ts": int(time.time())}
    except Exception as e:
        return {"status": "partial", "error": str(e), "page": f"/prs/{ev.number}.md"}


@app.get("/search")
def semantic_search(q: str = Query(..., description="Search query")):
    """
    Perform semantic search across PR summaries and release notes.

    Returns nodes ranked by semantic similarity to the query.
    """
    try:
        # Generate embedding for the query
        query_vector = embed(q)
        if not query_vector:
            return {"status": "error", "message": "Embedding generation unavailable"}

        # Search for similar content
        results = search_similar(query_vector, limit=20)

        return {"status": "ok", "query": q, "results": results, "count": len(results)}
    except Exception as e:
        return {"status": "error", "message": str(e)}
