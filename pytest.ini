[tool:pytest]
# GitGuard Test Configuration with Flexible Coverage Gates
# Supports different coverage requirements based on development phase

# Basic pytest configuration
minversion = 7.0
testpaths = tests
python_files = test_*.py *_test.py
python_classes = Test*
python_functions = test_*
addopts =
    --strict-markers
    --strict-config
    --tb=short
    --maxfail=10
    -ra
    --cov-config=.coveragerc

# Test markers for different scenarios
markers =
    unit: Unit tests (fast, isolated)
    integration: Integration tests (slower, requires services)
    e2e: End-to-end tests (slowest, full system)
    policy: Policy tests (OPA evaluation)
    chaos: Chaos engineering tests
    slow: Tests that take more than 5 seconds
    initial_dev: Tests for code in initial development phase
    incomplete_fixtures: Tests with incomplete OPA fixtures
    coverage_exempt: Tests exempt from strict coverage requirements
    experimental: Experimental features with relaxed requirements

# Async test configuration
asyncio_mode = auto

# Warnings configuration
filterwarnings =
    error
    ignore::UserWarning
    ignore::DeprecationWarning:pkg_resources.*
    ignore::PendingDeprecationWarning

# Test discovery
collect_ignore = [
    "setup.py",
    "build",
    "dist",
    ".tox",
    ".venv",
    "venv",
    "node_modules"

# Logging configuration for tests
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# Coverage configuration references
# See .coveragerc for detailed coverage settings
# Coverage gates are handled by CI workflow based on development phase
