name: Codex Portal

on:
  push:
    branches: [ docs ]
  pull_request:
    branches: [ docs ]
  workflow_dispatch:

# Minimal permissions for GitHub Pages deployment
permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  validate:
    name: Validate Documentation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for change detection
          
      - name: Scan docs for secrets
        uses: gitleaks/gitleaks-action@v2
        with:
          config-path: .gitleaks.toml
          redact: true
          log-level: error
          fail: true
          
      - name: Check for policy changes
        id: policy-changes
        run: |
          # Check if any policy files were changed
          POLICY_FILES=$(git diff --name-only origin/main...HEAD | grep -E '(policies/.*\.rego|docs_src/policies/)' || true)
          if [ -n "$POLICY_FILES" ]; then
            echo "policy_changed=true" >> $GITHUB_OUTPUT
            echo "Policy files changed:"
            echo "$POLICY_FILES"
          else
            echo "policy_changed=false" >> $GITHUB_OUTPUT
            echo "No policy files changed"
          fi
          
      - name: Install OPA for policy validation
        if: steps.policy-changes.outputs.policy_changed == 'true'
        run: |
          curl -L -o opa https://openpolicyagent.org/downloads/v0.58.0/opa_linux_amd64_static
          chmod +x opa
          sudo mv opa /usr/local/bin/
          
      - name: Validate policy syntax
        if: steps.policy-changes.outputs.policy_changed == 'true'
        run: |
          # Validate all Rego files
          find policies/ -name '*.rego' -exec opa fmt --diff {} \;
          
          # Test policy compilation
          opa test policies/ -v
          
      - name: Require policy approval
        if: steps.policy-changes.outputs.policy_changed == 'true' && github.event_name == 'pull_request'
        run: |
          # Check for required labels on policy changes
          if ! echo '${{ toJson(github.event.pull_request.labels.*.name) }}' | grep -q 'policy-approved'; then
            echo "‚ùå Policy changes require 'policy-approved' label from platform team"
            echo "Policy files changed:"
            git diff --name-only origin/main...HEAD | grep -E '(policies/.*\.rego|docs_src/policies/)'
            exit 1
          fi

  build:
    name: Build & Validate Documentation
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          
      - name: Install dependencies
        run: |
          pip install mkdocs-material mkdocs-htmlproofer-plugin markdown-link-check
          pip install mkdocs-mermaid2-plugin mkdocs-git-revision-date-localized-plugin
          
      - name: Validate Markdown syntax
        run: |
          # Check for common Markdown issues
          find docs/ -name '*.md' -exec markdown-link-check --config .markdown-link-check.json {} \;
          
      - name: Check documentation structure
        run: |
          # Ensure required documentation exists
          required_files=(
            "docs/index.md"
            "docs/getting-started.md"
            "docs/architecture.md"
            "docs/runbook.md"
            "docs/security.md"
          )
          
          for file in "${required_files[@]}"; do
            if [[ ! -f "$file" ]]; then
              echo "‚ùå Required documentation file missing: $file"
              exit 1
            fi
          done
          
      - name: Validate ADR structure
        run: |
          # Check ADR files follow proper naming and structure
          if ls docs/adr/*.md 1> /dev/null 2>&1; then
            for adr in docs/adr/*.md; do
              if ! grep -q "^# ADR-[0-9]\+:" "$adr"; then
                echo "‚ùå ADR file $adr doesn't follow naming convention"
                exit 1
              fi
              
              # Check for required sections
              required_sections=("Status" "Context" "Decision" "Consequences")
              for section in "${required_sections[@]}"; do
                if ! grep -qi "## $section" "$adr"; then
                  echo "‚ùå ADR file $adr missing required section: $section"
                  exit 1
                fi
              done
            done
          fi
          
      - name: Build docs with strict mode
        run: |
          mkdocs build --strict --verbose
          
      - name: Comprehensive link checking
        run: |
          # Check for dead links with detailed reporting
          mkdocs-htmlproofer ./site --raise-on-warnings
          
      - name: Validate documentation completeness
        run: |
          # Check for TODO/FIXME markers in documentation
          if grep -r "TODO\|FIXME\|XXX" docs/ --include="*.md"; then
            echo "‚ùå Documentation contains unresolved TODO/FIXME markers"
            exit 1
          fi
          
          # Check for placeholder content
          if grep -r "Lorem ipsum\|placeholder\|TBD\|Coming soon" docs/ --include="*.md"; then
            echo "‚ùå Documentation contains placeholder content"
            exit 1
          fi
          
      - uses: actions/upload-pages-artifact@v3
        with:
          path: site

  comment:
    if: github.event_name == 'pull_request'
    needs: build
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Check for critical documentation changes
        id: critical-changes
        run: |
          # Check for changes to critical documentation
          critical_patterns=(
            "docs/security.md"
            "docs/architecture.md"
            "docs/runbook.md"
            "policies/"
            "docs/adr/"
          )
          
          critical_changed=false
          for pattern in "${critical_patterns[@]}"; do
            if git diff --name-only origin/main...HEAD | grep -q "$pattern"; then
              critical_changed=true
              break
            fi
          done
          
          echo "critical_changed=$critical_changed" >> $GITHUB_OUTPUT
          
      - name: Require critical documentation approval
        if: steps.critical-changes.outputs.critical_changed == 'true'
        run: |
          # Check for required approvals on critical docs
          if ! echo '${{ toJson(github.event.pull_request.labels.*.name) }}' | grep -q 'docs-approved'; then
            echo "‚ùå Critical documentation changes require 'docs-approved' label from platform team"
            echo "Critical files changed:"
            git diff --name-only origin/main...HEAD | grep -E '(docs/(security|architecture|runbook)\.md|policies/|docs/adr/)'
            exit 1
          fi
          
      - name: Comment PR with Codex link
        uses: actions/github-script@v6
        with:
          script: |
            const criticalChanged = '${{ steps.critical-changes.outputs.critical_changed }}' === 'true';
            const warningText = criticalChanged ? 
              '‚ö†Ô∏è **Critical documentation changed** - Platform team approval required\n\n' : '';
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `${warningText}üß≠ **Codex preview**: \`${{ github.server_url }}/${{ github.repository }}/prs/${{ github.event.pull_request.number }}.html\``
            })

  deploy:
    if: github.event_name == 'push'
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    permissions:
      pages: write
      id-token: write
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4